{
    "summary": "The code contains an Image2Video class for video synthesis using DDIM sampling, text and image conditioning in a diffusion model. It includes functions for character replacement, length limitation, model downloads, and video saving. The script generates a video from an image prompt and prints the generated video path upon completion.",
    "details": [
        {
            "comment": "This code is an implementation of the Image2Video class. It downloads the model, sets the result directory, and loads the model configuration from a YAML file. It also instantiates the model using the provided configuration and sets the GPU number for parallel processing.",
            "location": "\"/media/root/Prima/works/DynamiCrafter/docs/src/scripts/gradio/i2v_test.py\":0-25",
            "content": "import os\nimport time\nfrom omegaconf import OmegaConf\nimport torch\nfrom scripts.evaluation.funcs import load_model_checkpoint, save_videos, batch_ddim_sampling, get_latent_z\nfrom utils.utils import instantiate_from_config\nfrom huggingface_hub import hf_hub_download\nfrom einops import repeat\nimport torchvision.transforms as transforms\nfrom pytorch_lightning import seed_everything\nclass Image2Video():\n    def __init__(self,result_dir='./tmp/',gpu_num=1) -> None:\n        self.download_model()\n        self.result_dir = result_dir\n        if not os.path.exists(self.result_dir):\n            os.mkdir(self.result_dir)\n        ckpt_path='checkpoints/dynamicrafter_256_v1/model.ckpt'\n        config_file='configs/inference_256_v1.0.yaml'\n        config = OmegaConf.load(config_file)\n        model_config = config.pop(\"model\", OmegaConf.create())\n        model_config['params']['unet_config']['params']['use_checkpoint']=False   \n        model_list = []\n        for gpu_id in range(gpu_num):\n            model = instantiate_from_config(model_config)"
        },
        {
            "comment": "Function `get_image` takes an image and a prompt, applies transformations to resize and crop the input image, empties GPU cache, and prints the start time. It then selects the appropriate model from `self.model_list` based on GPU ID, sends it to GPU, sets batch size and channels, defines frames, and sets noise shape for inversion process.",
            "location": "\"/media/root/Prima/works/DynamiCrafter/docs/src/scripts/gradio/i2v_test.py\":26-52",
            "content": "            # model = model.cuda(gpu_id)\n            assert os.path.exists(ckpt_path), \"Error: checkpoint Not Found!\"\n            model = load_model_checkpoint(model, ckpt_path)\n            model.eval()\n            model_list.append(model)\n        self.model_list = model_list\n        self.save_fps = 8\n    def get_image(self, image, prompt, steps=50, cfg_scale=7.5, eta=1.0, fs=3, seed=123):\n        seed_everything(seed)\n        transform = transforms.Compose([\n            transforms.Resize(256),\n            transforms.CenterCrop(256),\n            ])\n        torch.cuda.empty_cache()\n        print('start:', prompt, time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time())))\n        start = time.time()\n        gpu_id=0\n        if steps > 60:\n            steps = 60 \n        model = self.model_list[gpu_id]\n        model = model.cuda()\n        batch_size=1\n        channels = model.model.diffusion_model.out_channels\n        frames = model.temporal_length\n        h, w = 256 // 8, 256 // 8\n        noise_shape = [batch_size, channels, frames, h, w]"
        },
        {
            "comment": "This code generates images using DDIM sampling with text and image conditioning in a diffusion model. It prepares the text, image, and their embeddings, then performs batch inference through the DDIM sampling process.",
            "location": "\"/media/root/Prima/works/DynamiCrafter/docs/src/scripts/gradio/i2v_test.py\":54-78",
            "content": "        # text cond\n        text_emb = model.get_learned_conditioning([prompt])\n        # img cond\n        img_tensor = torch.from_numpy(image).permute(2, 0, 1).float().to(model.device)\n        img_tensor = (img_tensor / 255. - 0.5) * 2\n        image_tensor_resized = transform(img_tensor) #3,256,256\n        videos = image_tensor_resized.unsqueeze(0) # bchw\n        z = get_latent_z(model, videos.unsqueeze(2)) #bc,1,hw\n        img_tensor_repeat = repeat(z, 'b c t h w -> b c (repeat t) h w', repeat=frames)\n        cond_images = model.embedder(img_tensor.unsqueeze(0)) ## blc\n        img_emb = model.image_proj_model(cond_images)\n        imtext_cond = torch.cat([text_emb, img_emb], dim=1)\n        fs = torch.tensor([fs], dtype=torch.long, device=model.device)\n        cond = {\"c_crossattn\": [imtext_cond], \"fs\": fs, \"c_concat\": [img_tensor_repeat]}\n        ## inference\n        batch_samples = batch_ddim_sampling(model, cond, noise_shape, n_samples=1, ddim_steps=steps, ddim_eta=eta, cfg_scale=cfg_scale)\n        ## b,samples,c,t,h,w"
        },
        {
            "comment": "Code snippet contains two functions: 'i2v_test.py':79-98 is a method that replaces specific characters in the prompt string, limits its length to 40 characters, saves the video using saved models, and prints the saving time. 'download_model' function downloads a model checkpoint from Hugging Face Hub into the specified directory if it doesn't already exist.",
            "location": "\"/media/root/Prima/works/DynamiCrafter/docs/src/scripts/gradio/i2v_test.py\":79-98",
            "content": "        prompt_str = prompt.replace(\"/\", \"_slash_\") if \"/\" in prompt else prompt\n        prompt_str = prompt_str.replace(\" \", \"_\") if \" \" in prompt else prompt_str\n        prompt_str=prompt_str[:40]\n        if len(prompt_str) == 0:\n            prompt_str = 'empty_prompt'\n        save_videos(batch_samples, self.result_dir, filenames=[prompt_str], fps=self.save_fps)\n        print(f\"Saved in {prompt_str}. Time used: {(time.time() - start):.2f} seconds\")\n        model = model.cpu()\n        return os.path.join(self.result_dir, f\"{prompt_str}.mp4\")\n    def download_model(self):\n        REPO_ID = 'Doubiiu/DynamiCrafter'\n        filename_list = ['model.ckpt']\n        if not os.path.exists('./checkpoints/dynamicrafter_256_v1/'):\n            os.makedirs('./dynamicrafter_256_v1/')\n        for filename in filename_list:\n            local_file = os.path.join('./checkpoints/dynamicrafter_256_v1/', filename)\n            if not os.path.exists(local_file):\n                hf_hub_download(repo_id=REPO_ID, filename=filename, local_dir='./checkpoints/dynamicrafter_256_v1/', local_dir_use_symlinks=False)"
        },
        {
            "comment": "This code checks if the script is being run directly, then creates an Image2Video object and uses it to generate a video from an image prompt. The path of the generated video is printed as 'done' followed by the video path.",
            "location": "\"/media/root/Prima/works/DynamiCrafter/docs/src/scripts/gradio/i2v_test.py\":100-103",
            "content": "if __name__ == '__main__':\n    i2v = Image2Video()\n    video_path = i2v.get_image('prompts/art.png','man fishing in a boat at sunset')\n    print('done', video_path)"
        }
    ]
}